name: Continuous Integration and Delivery

on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/summarizer

jobs:

  build:
    name: Checkout Build Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Prebuilt
        run: echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Print Metadata
        run: echo ${{ steps.meta.outputs.tags }}
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./src
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  test:
      name: Pull Run Test
      runs-on: ubuntu-latest
      needs: build
      permissions:
        contents: read
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
          with:
            ref: main
        - name: Log in to the Container registry
          uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Build image
          run: docker build --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ./src
        - name: Run container
          run: docker run -dp 5003:8765 --name text-summariser -e PORT=8765 -e ENVIRONMENT=dev -e DATABASE_URL=sqlite://sqlite.db -e DATABASE_TEST_URL=sqlite://sqlite.db ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        - name: Pytest
          run: docker exec text-summariser python -m pytest .
        - name: Flake8
          run: docker exec text-summariser python -m flake8 .
        - name: Black
          run: docker exec text-summariser python -m black . --check
        - name: isort
          run: docker exec text-summariser python -m isort . --check-only
  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      HEROKU_APP_NAME: protected-reaches-64216
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/summarizer
    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          ref: main
#      - name: Log in to the Container registry
#        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Build image
#        run: docker build --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} -t ${{ env.HEROKU_REGISTRY_IMAGE }}/${{ env.IMAGE_NAME }}:latest --file ./src/Dockerfile.prod ./src
#      - name: Login to Heroku Container Registry
#        run: docker login -u _ -p ${HEROKU_AUTH_TOKEN} registry.heroku.com
#        env:
#          HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
#      - name: Push to the registry
#        run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}:latest
#      - name: Set environment variables
#        run: |
#          echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
#          echo "HEROKU_AUTH_TOKEN=${{ secrets.HEROKU_AUTH_TOKEN }}" >> $GITHUB_ENV
#      - name: Release
#        run: |
#          chmod +x ./release.sh
#          ./release.sh
      - name: Deploy to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
        with:
          # Below you must provide variables for your Heroku app.

          # The email address associated with your Heroku account.
          # If you don't want to use repository secrets (which is recommended) you can do:
          # email: my.email@example.com
          email: ${{ secrets.HEROKU_EMAIL }}

          # Heroku API key associated with provided user's email.
          # Api Key is available under your Heroku account settings.
          heroku_api_key: ${{ secrets.HEROKU_AUTH_TOKEN }}

          # Name of the heroku application to which the build is to be sent.
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

          # (Optional, default: "./")
          # Dockerfile directory.
          # For example, if you have a Dockerfile in the root of your project, leave it as follows:
          dockerfile_directory: ./src

          # (Optional, default: "Dockerfile")
          # Dockerfile name.
          dockerfile_name: Dockerfile.prod

          # (Optional, default: "")
          # Additional options of docker build command.
          docker_options: "--no-cache"

          # (Optional, default: "web")
          # Select the process type for which you want the docker container to be uploaded.
          # By default, this argument is set to "web".
          # For more information look at https://devcenter.heroku.com/articles/process-model
          process_type: web

